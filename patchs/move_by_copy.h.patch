--- /Users/lori/Desktop/sunshine/src/move_by_copy.h	2025-03-17 11:18:59
+++ /Users/lori/Desktop/nightmare-space/sunshine_android/android/app/src/main/cpp/move_by_copy.h	2025-03-16 06:41:13
@@ -11,50 +11,50 @@
  * @brief Contains utilities for moving objects by copying them.
  */
 namespace move_by_copy_util {
-  /**
-   * When a copy is made, it moves the object
-   * This allows you to move an object when a move can't be done.
-   */
-  template<class T>
-  class MoveByCopy {
-  public:
-    typedef T move_type;
+    /**
+     * When a copy is made, it moves the object
+     * This allows you to move an object when a move can't be done.
+     */
+    template<class T>
+    class MoveByCopy {
+    public:
+        typedef T move_type;
 
-  private:
-    move_type _to_move;
+    private:
+        move_type _to_move;
 
-  public:
-    explicit MoveByCopy(move_type &&to_move):
-        _to_move(std::move(to_move)) {
-    }
+    public:
+        explicit MoveByCopy(move_type &&to_move):
+                _to_move(std::move(to_move)) {
+        }
 
-    MoveByCopy(MoveByCopy &&other) = default;
+        MoveByCopy(MoveByCopy &&other) = default;
 
-    MoveByCopy(const MoveByCopy &other) {
-      *this = other;
-    }
+        MoveByCopy(const MoveByCopy &other) {
+            *this = other;
+        }
 
-    MoveByCopy &operator=(MoveByCopy &&other) = default;
+        MoveByCopy &operator=(MoveByCopy &&other) = default;
 
-    MoveByCopy &operator=(const MoveByCopy &other) {
-      this->_to_move = std::move(const_cast<MoveByCopy &>(other)._to_move);
+        MoveByCopy &operator=(const MoveByCopy &other) {
+            this->_to_move = std::move(const_cast<MoveByCopy &>(other)._to_move);
 
-      return *this;
-    }
+            return *this;
+        }
 
-    operator move_type() {
-      return std::move(_to_move);
+        operator move_type() {
+            return std::move(_to_move);
+        }
+    };
+
+    template<class T>
+    MoveByCopy<T> cmove(T &movable) {
+        return MoveByCopy<T>(std::move(movable));
     }
-  };
 
-  template<class T>
-  MoveByCopy<T> cmove(T &movable) {
-    return MoveByCopy<T>(std::move(movable));
-  }
-
-  // Do NOT use this unless you are absolutely certain the object to be moved is no longer used by the caller
-  template<class T>
-  MoveByCopy<T> const_cmove(const T &movable) {
-    return MoveByCopy<T>(std::move(const_cast<T &>(movable)));
-  }
-}  // namespace move_by_copy_util
+    // Do NOT use this unless you are absolutely certain the object to be moved is no longer used by the caller
+    template<class T>
+    MoveByCopy<T> const_cmove(const T &movable) {
+        return MoveByCopy<T>(std::move(const_cast<T &>(movable)));
+    }
+}  // namespace move_by_copy_util
\ No newline at end of file
