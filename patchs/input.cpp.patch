--- /Users/lori/Desktop/sunshine/src/input.cpp	2025-03-17 11:18:59
+++ /Users/lori/Desktop/nightmare-space/sunshine_android/android/app/src/main/cpp/input.cpp	2025-03-17 14:37:15
@@ -33,6 +33,8 @@
   #define WHEEL_DELTA 120
 #endif
 
+#include "sunshine.h"
+
 using namespace std::literals;
 
 namespace input {
@@ -116,8 +118,11 @@
   static std::bitset<platf::MAX_GAMEPADS> gamepadMask {};
 
   void free_gamepad(platf::input_t &platf_input, int id) {
+// TODO(Lori): Implement this, May Android can support this in the future.
+#ifndef __ANDROID__
     platf::gamepad_update(platf_input, id, platf::gamepad_state_t {});
     platf::free_gamepad(platf_input, id);
+#endif
 
     free_id(gamepadMask, id);
   }
@@ -398,7 +403,7 @@
         print((PNV_REL_MOUSE_MOVE_PACKET) payload);
         break;
       case MOUSE_MOVE_ABS_MAGIC:
-        print((PNV_ABS_MOUSE_MOVE_PACKET) payload);
+        // print((PNV_ABS_MOUSE_MOVE_PACKET) payload);
         break;
       case MOUSE_BUTTON_DOWN_EVENT_MAGIC_GEN5:
       case MOUSE_BUTTON_UP_EVENT_MAGIC_GEN5:
@@ -879,50 +884,65 @@
       return;
     }
 
-    // Convert the client normalized coordinates to touchport coordinates
-    auto coords = client_to_touchport(input, {from_clamped_netfloat(packet->x, 0.0f, 1.0f) * 65535.f, from_clamped_netfloat(packet->y, 0.0f, 1.0f) * 65535.f}, {65535.f, 65535.f});
-    if (!coords) {
-      return;
-    }
-
-    auto &touch_port = input->touch_port;
-    platf::touch_port_t abs_port {
-      touch_port.offset_x,
-      touch_port.offset_y,
-      touch_port.env_width,
-      touch_port.env_height
-    };
+    sunshine_callbacks::callJavaOnTouch(packet);
 
-    // Renormalize the coordinates
-    coords->first /= abs_port.width;
-    coords->second /= abs_port.height;
-
-    // Normalize rotation value to 0-359 degree range
-    auto rotation = util::endian::little(packet->rotation);
-    if (rotation != LI_ROT_UNKNOWN) {
-      rotation %= 360;
-    }
-
-    // Normalize the contact area based on the touchport
-    auto contact_area = scale_client_contact_area(
-      {from_clamped_netfloat(packet->contactAreaMajor, 0.0f, 1.0f) * 65535.f,
-       from_clamped_netfloat(packet->contactAreaMinor, 0.0f, 1.0f) * 65535.f},
-      rotation,
-      {abs_port.width / 65535.f, abs_port.height / 65535.f}
-    );
-
-    platf::touch_input_t touch {
-      packet->eventType,
-      rotation,
-      util::endian::little(packet->pointerId),
-      coords->first,
-      coords->second,
-      from_clamped_netfloat(packet->pressureOrDistance, 0.0f, 1.0f),
-      contact_area.first,
-      contact_area.second,
-    };
-
-    platf::touch_update(input->client_context.get(), abs_port, touch);
+    //   BOOST_LOG(debug) << "处理触摸事件: 类型=" << (int)packet->eventType << ", 指针ID=" << util::endian::little(packet->pointerId);
+    //
+    //   // Convert the client normalized coordinates to touchport coordinates
+    //   auto coords = client_to_touchport(input, {from_clamped_netfloat(packet->x, 0.0f, 1.0f) * 65535.f, from_clamped_netfloat(packet->y, 0.0f, 1.0f) * 65535.f}, {65535.f, 65535.f});
+    //   if (!coords) {
+    //     BOOST_LOG(warning) << "无法转换触摸坐标，可能是触摸端口未初始化";
+    //     return;
+    //   }
+    //
+    //   BOOST_LOG(debug) << "触摸坐标转换: 原始=("
+    //                   << from_clamped_netfloat(packet->x, 0.0f, 1.0f) << ","
+    //                   << from_clamped_netfloat(packet->y, 0.0f, 1.0f) << ") -> 转换=("
+    //                   << coords->first << "," << coords->second << ")";
+    //
+    //   auto &touch_port = input->touch_port;
+    //   platf::touch_port_t abs_port {
+    //     touch_port.offset_x,
+    //     touch_port.offset_y,
+    //     touch_port.env_width,
+    //     touch_port.env_height
+    //   };
+    //
+    //   // Renormalize the coordinates
+    //   coords->first /= abs_port.width;
+    //   coords->second /= abs_port.height;
+    //
+    //   // Normalize rotation value to 0-359 degree range
+    //   auto rotation = util::endian::little(packet->rotation);
+    //   if (rotation != LI_ROT_UNKNOWN) {
+    //     rotation %= 360;
+    //   }
+    //
+    //   // Normalize the contact area based on the touchport
+    //   auto contact_area = scale_client_contact_area(
+    //     {from_clamped_netfloat(packet->contactAreaMajor, 0.0f, 1.0f) * 65535.f,
+    //      from_clamped_netfloat(packet->contactAreaMinor, 0.0f, 1.0f) * 65535.f},
+    //     rotation,
+    //     {abs_port.width / 65535.f, abs_port.height / 65535.f}
+    //   );
+    //
+    //   BOOST_LOG(debug) << "触摸区域: 主轴=" << contact_area.first << ", 次轴=" << contact_area.second
+    //                   << ", 压力=" << from_clamped_netfloat(packet->pressureOrDistance, 0.0f, 1.0f)
+    //                   << ", 旋转=" << rotation;
+    //
+    //   platf::touch_input_t touch {
+    //     packet->eventType,
+    //     rotation,
+    //     util::endian::little(packet->pointerId),
+    //     coords->first,
+    //     coords->second,
+    //     from_clamped_netfloat(packet->pressureOrDistance, 0.0f, 1.0f),
+    //     contact_area.first,
+    //     contact_area.second,
+    //   };
+    //
+    //   BOOST_LOG(debug) << "准备更新触摸状态: 最终坐标=(" << coords->first << "," << coords->second << ")";
+    //   platf::touch_update(input->client_context.get(), abs_port, touch);
   }
 
   /**
@@ -1519,6 +1539,7 @@
       }
     }
 
+    // TODO(Lori)
     // Print the final input packet
     input::print((void *) payload);
 
@@ -1611,12 +1632,16 @@
   class deinit_t: public platf::deinit_t {
   public:
     ~deinit_t() override {
+#ifndef __ANDROID__
       platf_input.reset();
+#endif
     }
   };
 
   [[nodiscard]] std::unique_ptr<platf::deinit_t> init() {
+#ifndef __ANDROID__
     platf_input = platf::input();
+#endif
 
     return std::make_unique<deinit_t>();
   }
